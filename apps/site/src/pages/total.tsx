import {
  addDays,
  addMonths,
  addQuarters,
  addWeeks,
  addYears,
  lightFormat,
} from "date-fns";
import type { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import React, { useState } from "react";

import { BottomNavigation } from "../components/BottomNavigation";
import { trpc } from "../utils/trpc";

const MyBarChart = dynamic(
  () => import("../components/charts/MyBarChart").then((imp) => imp.MyBarChart),
  { ssr: false }
);

type Range = "day" | "week" | "month" | "quarter" | "year";

const Page: NextPage = () => {
  const [range, setRange] = useState<Range>("day");
  const [startDate, setStartDate] = useState(new Date());

  const getEnergyTotalByDayQuery = trpc.logs.getEnergyTotalByDay.useQuery(
    { date: startDate },
    {
      enabled: range === "day",
    }
  );

  const getEnergyTotalByWeekQuery = trpc.logs.getEnergyTotalByWeek.useQuery(
    { startDate: startDate },
    {
      enabled: range === "week",
    }
  );

  const getEnergyTotalByMonthQuery = trpc.logs.getEnergyTotalByMonth.useQuery(
    { startDate: startDate },
    {
      enabled: range === "month",
    }
  );

  const getEnergyTotalByYearQuery = trpc.logs.getEnergyTotalByYear.useQuery(
    { startDate: startDate },
    {
      enabled: range === "year",
    }
  );

  const handleYearChange: React.ChangeEventHandler<HTMLSelectElement> = (
    event
  ) => {
    const { value } = event.target;

    if (
      value === "day" ||
      value === "week" ||
      value === "month" ||
      value === "quarter" ||
      value === "year"
    ) {
      setRange(value);
    }
  };

  const handleDateChangeBackwards = () => {
    if (range === "day") {
      setStartDate((prev) => addDays(prev, -1));
    } else if (range === "week") {
      setStartDate((prev) => addWeeks(prev, -1));
    } else if (range === "month") {
      setStartDate((prev) => addMonths(prev, -1));
    } else if (range === "quarter") {
      setStartDate((prev) => addQuarters(prev, -1));
    } else if (range === "year") {
      setStartDate((prev) => addYears(prev, -1));
    }
  };

  const handleDateChangeForwards = () => {
    if (range === "day") {
      setStartDate((prev) => addDays(prev, 1));
    } else if (range === "week") {
      setStartDate((prev) => addWeeks(prev, 1));
    } else if (range === "month") {
      setStartDate((prev) => addMonths(prev, 1));
    } else if (range === "quarter") {
      setStartDate((prev) => addQuarters(prev, 1));
    } else if (range === "year") {
      setStartDate((prev) => addYears(prev, 1));
    }
  };

  const { title, subtitle, forwardDisabled, Chart } = (() => {
    return {
      title: (() => {
        switch (range) {
          case "day":
            return "Średnia moc względem godziny (W)";
          case "week":
            return "Średnia moc względem dnia (W)";
          case "month":
            return "Średnia moc względem tygodnia (W)";
          case "quarter":
            return "Średnia moc względem kwartału (W)";
          case "year":
            return "Średnia moc względem lat (W)";
          default:
            return "";
        }
      })(),
      subtitle: (() => {
        switch (range) {
          case "day":
            return startDate.toLocaleDateString();
          case "week":
            return `${lightFormat(startDate, "yyyy-MM-dd")} - ${lightFormat(
              addDays(startDate, 7),
              "yyyy-MM-dd"
            )}`;
          case "month":
            return startDate.toJSON();
          case "quarter":
            return startDate.toJSON();
          case "year":
            return startDate.toJSON();
        }
      })(),
      forwardDisabled: startDate.toDateString() === new Date().toDateString(),
      Chart: (() => {
        if (range === "day") {
          return <MyBarChart data={getEnergyTotalByDayQuery.data} />;
        } else if (range === "week") {
          return <MyBarChart data={getEnergyTotalByWeekQuery.data} />;
        } else if (range === "month") {
          return <MyBarChart data={getEnergyTotalByMonthQuery.data} />;
        } else if (range === "quarter") {
          return <MyBarChart data={getEnergyTotalByWeekQuery.data} />;
        } else if (range === "year") {
          return <MyBarChart data={getEnergyTotalByYearQuery.data} />;
        }
      })(),
    };
  })();

  return (
    <>
      <Head>
        <title>SolarSystem - Strona główna</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div id="container" className="flex flex-col w-full h-full bg-gray-200">
        <div className="w-full pb-2 text-xl font-bold text-center">{title}</div>
        <div className="w-full pb-2 font-bold text-center text-md">
          {subtitle}
        </div>

        <main className="flex flex-col flex-1">{Chart}</main>

        <footer className="flex items-center w-full h-24 gap-4 px-4 justify-evenly">
          <FooterButton onClick={handleDateChangeBackwards}>
            {"<<"}
          </FooterButton>
          <select
            className="flex-1 h-12 text-xl font-bold text-center bg-gray-300 border-2 border-gray-700 rounded-md"
            value={range}
            onChange={handleYearChange}
          >
            <option value="day">Dzień</option>
            <option value="week">Tydzień</option>
            <option value="month">Miesiąc</option>
            <option value="quarter">Kwartał</option>
            <option value="year">Rok</option>
          </select>
          <FooterButton
            onClick={handleDateChangeForwards}
            disabled={forwardDisabled}
          >
            {">>"}
          </FooterButton>
        </footer>

        <BottomNavigation active="energy_total" />
      </div>
    </>
  );
};

const FooterButton: React.FC<
  React.DetailedHTMLProps<
    React.ButtonHTMLAttributes<HTMLButtonElement>,
    HTMLButtonElement
  >
> = (props) => {
  return (
    <button
      {...props}
      className={`w-16 h-12 grid place-items-center text-2xl font-bold border-2 border-blue-900 rounded-md ${
        props.disabled
          ? "bg-gray-300 text-gray-400"
          : "bg-blue-400 text-gray-700"
      }`}
    >
      {props.children}
    </button>
  );
};

export default Page;
