import {
  addDays,
  addMonths,
  addQuarters,
  addWeeks,
  addYears,
  lightFormat,
} from "date-fns";
import type { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import React, { useState } from "react";

import { BottomNavigation } from "../components/BottomNavigation";
import { Select } from "../components/Select";
import { trpc } from "../utils/trpc";

const MyBarChart = dynamic(
  () => import("../components/charts/MyBarChart").then((imp) => imp.MyBarChart),
  { ssr: false }
);

enum Range {
  HOUR = "HOUR",
  DAY = "DAY",
  WEEK = "WEEK",
  MONTH = "MONTH",
  QUARTER = "QUARTER",
  YEAR = "YEAR",
}

const RangeOptions = [
  { key: "range-options-hour", label: "Godzina", value: Range.HOUR },
  { key: "range-options-day", label: "Dzień", value: Range.DAY },
  { key: "range-options-week", label: "Tydzień", value: Range.WEEK },
  { key: "range-options-month", label: "Miesiąc", value: Range.MONTH },
  { key: "range-options-quarter", label: "Kwartał", value: Range.QUARTER },
  { key: "range-options-year", label: "Rok", value: Range.YEAR },
];

const Title = {
  [Range.HOUR]: "Najwyższa moc względem godziny",
  [Range.DAY]: "Najwyższa moc względem dnia",
  [Range.WEEK]: "Najwyższa moc względem tygodnia",
  [Range.MONTH]: "Najwyższa moc względem miesiąca",
  [Range.QUARTER]: "Najwyższa moc względem kwartału",
  [Range.YEAR]: "Najwyższa moc względem roku",
};

const Subtitle = {
  [Range.HOUR]: (date: Date) => `${date.toDateString()}`,
  [Range.DAY]: (date: Date) => `${date.toDateString()}`,
  [Range.WEEK]: (date: Date) => `${date.toDateString()}`,
  [Range.MONTH]: (date: Date) => `${date.toDateString()}`,
  [Range.QUARTER]: (date: Date) => `${date.toDateString()}`,
  [Range.YEAR]: (date: Date) => `${date.toDateString()}`,
};

const Page: NextPage = () => {
  const [range, setRange] = useState<Range>(Range.HOUR);
  const [startDate, setStartDate] = useState(new Date());

  const byHourQuery = trpc.total.byHour.useQuery(
    { start: startDate },
    {
      enabled: range === Range.HOUR,
    }
  );

  const byDayQuery = trpc.total.byDay.useQuery(
    { start: startDate },
    {
      enabled: range === Range.DAY,
    }
  );

  const byWeekQuery = trpc.total.byWeek.useQuery(
    { start: startDate },
    {
      enabled: range === Range.WEEK,
    }
  );

  const byMonthQuery = trpc.total.byMonth.useQuery(
    { start: startDate },
    {
      enabled: range === Range.MONTH,
    }
  );

  const byQuarterQuery = trpc.total.byQuarter.useQuery(
    { start: startDate },
    {
      enabled: range === Range.QUARTER,
    }
  );

  const byYearQuery = trpc.total.byYear.useQuery(
    { start: startDate },
    {
      enabled: range === Range.YEAR,
    }
  );

  const handleRangeChange: React.ChangeEventHandler<HTMLSelectElement> = (
    event
  ) => {
    const { value } = event.target;

    if (value in Range) {
      setRange(value as Range);
    }
  };

  const handleDateChangeBackwards = () => {
    if (range === Range.HOUR) {
      setStartDate((prev) => addDays(prev, -1));
    } else if (range === Range.DAY) {
      setStartDate((prev) => addWeeks(prev, -1));
    } else if (range === Range.WEEK) {
      setStartDate((prev) => addMonths(prev, -1));
    } else if (range === Range.MONTH) {
      setStartDate((prev) => addQuarters(prev, -1));
    } else if (range === Range.QUARTER) {
      setStartDate((prev) => addYears(prev, -1));
    }
  };

  const handleDateChangeForwards = () => {
    if (range === Range.HOUR) {
      setStartDate((prev) => addDays(prev, 1));
    } else if (range === Range.DAY) {
      setStartDate((prev) => addWeeks(prev, 1));
    } else if (range === Range.WEEK) {
      setStartDate((prev) => addMonths(prev, 1));
    } else if (range === Range.MONTH) {
      setStartDate((prev) => addQuarters(prev, 1));
    } else if (range === Range.QUARTER) {
      setStartDate((prev) => addYears(prev, 1));
    }
  };

  const title = Title[range];
  const subtitle = Subtitle[range](startDate);
  const forwardDisabled =
    startDate.toDateString() === new Date().toDateString();
  const chartData = (() => {
    if (range === Range.HOUR) {
      return byHourQuery.data;
    } else if (range === Range.DAY) {
      return byDayQuery.data;
    } else if (range === Range.WEEK) {
      return byWeekQuery.data;
    } else if (range === Range.MONTH) {
      return byMonthQuery.data;
    } else if (range === Range.QUARTER) {
      return byQuarterQuery.data;
    } else if (range === Range.YEAR) {
      return byYearQuery.data;
    }
  })();

  return (
    <>
      <Head>
        <title>SolarSystem - Suma energii</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div id="container" className="flex flex-col w-full h-full bg-gray-200">
        <div className="w-full pb-2 text-xl font-bold text-center">{title}</div>
        <div className="w-full pb-2 font-bold text-center text-md">
          {subtitle}
        </div>

        <main className="flex flex-col flex-1">
          <MyBarChart data={chartData} />
        </main>

        <footer className="flex items-center w-full h-24 gap-4 px-4 justify-evenly">
          <FooterButton onClick={handleDateChangeBackwards}>
            {"<<"}
          </FooterButton>
          <Select
            onChange={handleRangeChange}
            value={range}
            options={RangeOptions}
          />
          <FooterButton
            onClick={handleDateChangeForwards}
            disabled={forwardDisabled}
          >
            {">>"}
          </FooterButton>
        </footer>

        <BottomNavigation active="energy_total" />
      </div>
    </>
  );
};

const FooterButton: React.FC<
  React.DetailedHTMLProps<
    React.ButtonHTMLAttributes<HTMLButtonElement>,
    HTMLButtonElement
  >
> = (props) => {
  return (
    <button
      {...props}
      className={`w-16 h-12 grid place-items-center text-2xl font-bold border-2 border-blue-900 rounded-md ${
        props.disabled
          ? "bg-gray-300 text-gray-400"
          : "bg-blue-400 text-gray-700"
      }`}
    >
      {props.children}
    </button>
  );
};

export default Page;
